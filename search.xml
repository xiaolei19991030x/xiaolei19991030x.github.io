<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[排序算法——合并排序与自底向上合并排序]]></title>
    <url>%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2Fpage-14%2F</url>
    <content type="text"><![CDATA[在我们之前的算法设计课程中,我们学习了合并排序与自底向上合并排序算法,今天我们就来分析一下这个算法。 合并算法无论是合并排序还是自底向上合并排序,他的实现都基于一个重要的算法:合并算法(merge算法)。Merge算法实现的功能是将两个数组合并成为一个数组,我们可以定义一个结果数组b,再分别定义两个索引p1、p2,分别指向两个数组的头,将p1、p2指向的两个数进行比较,并将较小的那一个放入数组b Merge算法的伪码如下:1234567891011121314151617merge(p, q, r, a[]):s←p; t←q+1; k←pwhile s≤q and t≤r if a[s] ≤ a[t] then b[k] ← a[s] s ←s+1 else b[k]←a[t] t←t+1 end if k←k+1end whileif s=q+1 then b[k...r]←a[t...r]else b[k...r]←a[s...q]end ifa[p...r]←b[p...r] 自底向上合并排序算法自底向上合并算法顾名思义,就是从最底部开始,将数组元素两两合并,再将合并后的数组两两合并,直到重新合并成一个完整的数组。对于数组a = {9,4,5,2,1,7,4,6}的合并过程可以用如下图来表示: 完整代码(java)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//自底向上合并排序public class BottomUpSort &#123; public static void main(String args[]) &#123; int a[] = &#123;9,4,5,2,1,7,4,6&#125;; bottomUpSort(a); for(int i=0;i&lt;a.length;i++) System.out.print(a[i] + " "); System.out.println(); &#125; public static void bottomUpSort(int a[]) &#123; int i, s, t = 1; while(t &lt; a.length-1) &#123; s = t; t = 2*s; i = 0; for(;i+t &lt; a.length;i+=t) merge(i, i+s-1, i+t-1, a); //自底向上进行排序 if(i+s-1 &lt; a.length-1) //判断是否有落单元素 merge(i, i+s-1, a.length-1, a); &#125; &#125; public static void merge(int low, int mid, int high, int a[]) &#123; int b[] = new int[a.length]; // 建立转存数组 int f = low, s = mid+1, p = low; //f为第一个数组索引,s为第二个数组索引,p为b数组索引 while(f&lt;=mid &amp;&amp; s&lt;=high) &#123; //在两个数组元素中值小的一方放入b数组 if(a[f] &lt;= a[s]) &#123; b[p] = a[f]; f++; &#125; else &#123; b[p] = a[s]; s++; &#125; p++; &#125; if(f == mid+1) //若第一个数组中的元素全部存储进去了,那么将第二个数组中的剩余元素全部放入b数组 for(;s &lt;= high &amp;&amp; p&lt;=high;p++,s++) b[p] = a[s]; else //否则将第一个数组中的元素全部放入b数组 for(;f&lt;=mid &amp;&amp; p&lt;=high;p++,f++) b[p] = a[f]; for(int i=low;i&lt;=high;i++) a[i] = b[i]; &#125;&#125; 合并排序算法合并排序算法与自底向上合并排序十分相似(废话!),只不过与自底向上合并排序不同的是,合并排序是一个自顶向下的过程。我们可以将一整个数组拆分成两个数组,将其中的一个数组再进行拆分,直到拆分成两个单个元素,再将他们合并…重复此过程直到整个数组都重新合并完毕。 对于数组a[]={9,4,5,2,1,7,4,6}的合并排序可以用如下图示表示: 合并排序算法伪代码如下:12345678mergesort(low, high, a[]):if low&lt;high then mid←(low + high)/2 ergesort(low, mid, a) mergesort(mid+1, high, a) merge(low, mid, high, a)end if 完整代码(Java)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//合并排序算法public class MergeSort &#123; public static void main(String args[]) &#123; int a[] = &#123;9,4,5,2,1,7,4,6&#125;; mergeSort(0, a.length-1, a); for(int i=0;i&lt;a.length;i++) System.out.print(a[i] + " "); System.out.println(); &#125; //合并排序 public static void mergeSort(int low, int high, int a[]) &#123; if(low &lt; high) &#123; int mid = (low + high)/2; mergeSort(low, mid, a); mergeSort(mid+1, high, a); merge(low, mid, high, a); &#125; &#125; //合并两个数组 public static void merge(int low, int mid, int high, int a[]) &#123; int b[] = new int[a.length]; // 建立转存数组 int f = low, s = mid+1, p = low; //f为第一个数组索引,s为第二个数组索引,p为b数组索引 while(f&lt;=mid &amp;&amp; s&lt;=high) &#123; //在两个数组元素中值小的一方放入b数组 if(a[f] &lt;= a[s]) &#123; b[p] = a[f]; f++; &#125; else &#123; b[p] = a[s]; s++; &#125; p++; &#125; if(f == mid+1) //若第一个数组中的元素全部存储进去了,那么将第二个数组中的剩余元素全部放入b数组 for(;s &lt;= high &amp;&amp; p&lt;=high;p++,s++) b[p] = a[s]; else //否则将第一个数组中的元素全部放入b数组 for(;f&lt;=mid &amp;&amp; p&lt;=high;p++,f++) b[p] = a[f]; for(int i=low;i&lt;=high;i++) a[i] = b[i]; &#125;&#125;]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在VC++6.0上搭建OpenGL开发环境]]></title>
    <url>%2FOpenGL%2Fpage-13%2F</url>
    <content type="text"><![CDATA[OPenGL(Open Graphics Library)是一个跨编程语言、跨平台的编程接口规格的专业的图形程序接口。是一个功能强大，调用方便的底层图形库。下面来介绍如何在VC++6.0上搭建OpenGL开发环境。 工具 VC++6.0提取码：qxzl备注：我是安装在D盘上的，默认是安装在C盘上。 glutdlls37beta.zip 步骤1.安装VC++6.0，一路安装即可。 2.glut文件下载，解压后出现以下5个文件，即1个.h文件,2个.dll文件 和 2个.lib文件。 .h头文件将解压后的压缩包中的.h文件放到 VC++安装目录 vc 6.0\VC98\Include\GL 的文件夹中,如下图所示。 提示：如果在incluce目录下没有GL文件夹，则需要手动创建。 .dll头文件将 glut.dll ,glut32.dll 这两个动态库文件放到操作系统目录下面的 C:\Windows\system32或C:\Windows\SysWOW64 下，为了兼容性考虑，最好在这两个目录下都复制相应的文件。 .lib头文件解压后将得到的 glut.lib 和 glut32.lib 这两个静态函数库复制到 vc 6.0\VC98\Lib 文件夹下。 3.程序测试 首先，打开VC++6.0软件，点击菜单栏上的“File(文件)”–&gt;”new(新建)”，如下图所示： 弹出一个“new (新建)”窗口，点击“project（工程）”选项卡，然后选中“Win32 Console Application”,再填写一个工程名，如下图所示： 选择好后点击“确定”按钮，会弹出“Win32 Console Application”窗口，在窗口中选择什么类型的控制台程序，一般默认“an empty project（一个空过程）”即可，点击“finish（完成）”按钮，如下图所示： 这样就创建好了一个新工程，如下图所示： 选中Source Files文件夹，然后单击菜单栏上的“project（工程）”–&gt;”add file to project（增加到工程）”–&gt;”new（新建）”，如下图所示： 进入到“new(新建)”窗口，点击“Files（文件）”选项，在其中选择“C++ Source File”选项，在右侧填写“file name(文件名)”，然后点击“确定”按钮，如下图所示： 编写程序，编译运行源代码如下： 12345678910111213141516171819202122232425262728#include &lt;gl/glut.h&gt; void mydisplay(void) &#123; //清除色彩位缓冲区 glClear(GL_COLOR_BUFFER_BIT); glRectf(-0.5f, -0.5f, 0.5f, 0.5f); //按上述命令绘制图形，glFlush命令只适用于单缓冲模式 glFlush(); &#125; int main(int argc,char**argv) &#123; //初始化opengl工具箱函数库 glutInit(&amp;argc,argv); //设置RGB色彩模式与单缓冲绘图模式 glutInitDisplayMode(GLUT_RGB|GLUT_SINGLE); //设置图像显示窗口的左上角位置(20,200) glutInitWindowPosition(200,200); //设置窗口大小(400,400) glutInitWindowSize(400,400); //设置窗口标题 glutCreateWindow("hello world"); //myDisplay，表示取得函数名所对应的地址（函数地址） glutDisplayFunc(mydisplay); //程序主循环 glutMainLoop(); return 0; &#125; 运行结果如下： 感受花了一下午的时间才把OpenGL弄好，期间遇到了各种各样的问题解决在最终都解决了，过程中也收获了许多,也在CSDN上搜了许多教程，顺便写了这篇文章，以后会继续坚持写博客的。]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Web学习——用Intellij Idea 创建Web项目]]></title>
    <url>%2FJava-Web%2Fpage-12%2F</url>
    <content type="text"><![CDATA[相关软件： Intellij Idea 破解教程：戳这!!! JDK 1.6/1.7/1.8都可以 tomcat 7以上都可以,去官网下载压缩包解压即可 链接：http://tomcat.apache.org/ 一、创建简单web项目2019/9/23 21:51:45 File -&gt; New Project -&gt; 选择你的Project SDK（我的是1.8）-&gt; Next 输入项目名：webDemo -&gt; Next -&gt; Finish 二、创建一个Module 鼠标点中项目名称webDemo -&gt; 右键选择New，选择 Module -&gt; Module SDK 选择1. -&gt; 勾选JavaEE下的Web Application(4.0)，注意窗口下的version对应为4.0，且Create web.xml已勾选 -&gt; Next 输入Module name 为firstweb -&gt; Finish 创建好的web项目 在web/WEB_INF 目录下创建两个文件夹：classes和lib,classes用来存放编译后输出的class文件，lib用于存放第三方jar包 配置文件夹路径 File -&gt; Project Structure (ctrl + shift + Alt + s) 或者使用工具栏的快捷键 -&gt; 选择Modules 选择Paths -&gt; 选择“Use module compile out path” -&gt; 将Outputpath 和Test output path 都设置为刚刚创建的classes文件夹的路径。 选择当前窗口的Dependencies -&gt; 将Module SDK选择为1.8 -&gt; 点击下边的 + 号 -&gt; 选择 “1 JARS or directories …” 选择刚刚创建的lib文件夹 -&gt; OK 选择Jar Directory -&gt; OK Apply -&gt; OK 三、配置Tomcat容器 打开菜单Run -&gt; Edit Configurations… 点击 “+” ，选择 “Tomcat Server” -&gt; 选择“Local” 在”Name”处输入新的服务名，点击”Application server”后面的”Configure…”，弹出Tomcat Server窗口，选择本地安装的Tomcat目录 -&gt; OK 四、在tomcat上部署并运行项目 选择Deployment -&gt; 点击下面的“+”号 -&gt; 选择Artifact 选择web项目 -&gt; Application context可以填“/firstweb”(访问项目用，也可以不填) -&gt; OK 回到Server面板,勾选取消“After Launch”，设置“HTTP port”和“JMX port”（默认值即可），将On ‘update’ action和On frame deactivation（这两个选项是tomcat配置了项目后才有的）改为update classes and resources -&gt; Apply 五、开发web项目并运行tomcat查看效果1、编辑index.jsp页面 2、运行Tomcat]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大话数据结构（三）— 栈的两种java实现方式]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2Fpage-11%2F</url>
    <content type="text"><![CDATA[栈：限定仅在表尾进行插入和删除操作的线性表。栈是一种后进先出的结构,我们将允许插入和删除的一端称为栈顶（top），而另一端就称之为栈底（bottom），当栈中无任何数据元素时称作空栈。 栈是一个线性表，它具有线性关系，即前驱后继的关系。由于栈限定了线性表插入和删除的位置，所以栈底也是固定的。在线性表中表头是栈底，表我是栈顶。最先入栈的只能在栈底。下面我们来看看栈的两种操作——进栈和出栈： 1.栈的顺序存储结构用数组存放数据，top变量来指示栈顶元素在数组中的位置（栈顶指针）。一个长度为5的栈的示意图如下： 实验程序： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110package com.tongcaipay.merchant.apply.study;import java.util.Arrays;/** * * 顺序栈 * Created by xiaolei on 19-08-27 */public class ArrayStack&lt;T&gt; &#123; private final int DEFAULT_SIZE = 10; //设置默认尺寸 private int capacity; //保存当前数组长度 private int addCapacity; //设置当超出原数组长度时增加的长度 private Object[] elements; //初始化顺序栈数组 private int size; //保存顺序栈中元素的个数 //创建默认长度的空顺序栈 public ArrayStack()&#123; capacity = DEFAULT_SIZE; elements = new Object[capacity]; &#125; //创建指定长度的空顺序栈 public ArrayStack(int capacity)&#123; this.capacity = capacity; elements = new Object[capacity]; &#125; /** * 创建指定长度的空顺序栈，并指定超出数组范围后的增量 * @param capacity 设置指定长度 * @param addCapacity 设置增量 */ public ArrayStack(int capacity,int addCapacity) &#123; this.capacity = capacity; this.addCapacity = addCapacity; elements = new Object[capacity]; &#125; //获取顺序栈的长度 public int getSize()&#123; return size; &#125; //判断顺序栈是否为空栈 public boolean isEmpty()&#123; return size == 0; &#125; //确保数组长度，如果超出就进行拓展 private void ensureCapacity(int inputCapacity)&#123; //如果输入的数组长度大于原有数组的长度 if (inputCapacity &gt; capacity)&#123; //若果有设定数组增量 if(addCapacity &gt; 0)&#123; while (inputCapacity &gt; addCapacity) capacity += inputCapacity; &#125; else&#123; while (inputCapacity &gt; addCapacity) capacity &lt;&lt;= 1; &#125; //扩容后，将原数组复制到新数组中 elements = Arrays.copyOf(elements, capacity); &#125; &#125; //进栈 public void push(T element)&#123; //确保数组长度 ensureCapacity(size+1); //元素进栈 elements[size++] = element; &#125; //出栈 //同时返回弹出的元素 public T pop()&#123; //如果是空栈 if (isEmpty()) return null; T element = (T) elements[size-1]; //释放栈顶元素并将长度减一 elements[--size] = null; return element; &#125; //获取栈顶元素 public T getTop() &#123; return (T) elements[size - 1]; &#125; //清空顺序栈 public void clear()&#123; for (int i = 0;i&lt;size;i++) elements[i] = null; size = 0; &#125; public String toString()&#123; if(isEmpty()) return "[]"; else &#123; //实例化对sb,构造方法 StringBuilder sb = new StringBuilder("["); //StringBuilder 的内容是可变的 for (int i = size -1;i&gt;=0;i--) sb.append(elements[i].toString()+" "); //链式编程.append特点:能放很多类型的数据 sb.append("]"); int len = sb.length(); return sb.delete(len - 2,len - 1).toString(); &#125; &#125; 测试代码: 12345678910111213141516171819202122232425 public static void main(String[] args) &#123; ArrayStack&lt;String&gt; ll = new ArrayStack&lt;String&gt;(); System.out.println("原栈中的元素： "+ll); System.out.println("----------进栈----------"); //压栈 ll.push("haha"); ll.push("hehe"); ll.push("xixi"); ll.push("hiahia"); ll.push("heihei"); System.out.println("压栈后栈中所含元素： "+ll); //获取栈顶元素 System.out.println("栈顶元素为： "+ll.getTop()); //获取栈中元素个数 System.out.println("当前栈中元素个数为： "+ll.getSize()); //出栈 System.out.println("----------出栈----------"); ll.pop(); System.out.println("出栈后栈中所含元素： "+ll); //获取栈顶元素 System.out.println("栈顶元素为： "+ll.getTop()); //获取栈中元素个数 System.out.println("当前栈中元素个数为： "+ll.getSize()); &#125;&#125; 测试结果： 2.栈的链式存储结构下面我们再来看看链栈，链栈的入栈操作如图： 链栈的出栈如下图： 实验程序： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package com.tongcaipay.merchant.apply.study;public class LinkListStack&lt;T&gt; &#123; //定义一个内部类 Node 表示单链表的结点 private class Node &#123; private T element; private Node next; //初始化空构造器 public Node() &#123; &#125; //初始化含参数构造器 public Node(T element, Node next) &#123; this.element = element; this.next = next; &#125; &#125; private Node top;//存放栈顶结点 private int size;//存放栈中结点数 //初始化空栈 public LinkListStack() &#123; &#125; //获取栈长度 public int getSize() &#123; return size; &#125; //判断栈是否为空栈 public boolean isEmpty() &#123; return size == 0; &#125; public void push(T element) &#123; //进栈时,新结点的后驱指针next指向旧top Node newNode = new Node(element, top); //进来的新结点更新为top top = newNode; size++; &#125; //出栈 //返回弹出的元素 public T pop() &#123; //如果弹出时栈为空则返回空 if (isEmpty()) return null; //用一个结点保存原头结点 Node p = top; //将现在的头结点更新为原结点的下一个结点 top = top.next; //将原头结点释放 p.next = null; size--; return p.element; &#125; //获取栈顶元素 public T getTop() &#123; //如果为空栈则返回空 if (isEmpty()) return null; return top.element; &#125; //清空栈 public void clear() &#123; top = null; size = 0; &#125; public String toString() &#123; if (isEmpty()) return "[]"; else &#123; StringBuilder sb = new StringBuilder("["); for (Node current = top; current != null; current = current.next) sb.append(current.element.toString() + "-&gt;"); sb.append("]"); int len = sb.length(); return sb.delete(len - 3, len - 1).toString(); &#125; &#125; 测试代码： 123456789101112131415161718192021222324public static void main(String[] args) &#123; LinkListStack&lt;String&gt; ll = new LinkListStack&lt;String&gt;(); System.out.println("原栈中的元素： " + ll); System.out.println("----------进栈啦----------"); //压栈 ll.push("haha"); ll.push("hehe"); ll.push("xixi"); ll.push("hiahia"); ll.push("heihei"); System.out.println("压栈后栈中所含元素： " + ll); //获取栈顶元素 System.out.println("栈顶元素为： " + ll.getTop()); //获取栈中元素个数 System.out.println("当前栈中元素个数为： " + ll.getSize()); //出栈 System.out.println("----------出栈啦----------"); ll.pop(); System.out.println("出栈后栈中所含元素： " + ll); //获取栈顶元素 System.out.println("栈顶元素为： " + ll.getTop()); //获取栈中元素个数 System.out.println("当前栈中元素个数为： " + ll.getSize());&#125; 测试结果：]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>顺序存储</tag>
        <tag>链式存储</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大话数据结构学习笔记（二）—— 线性表]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2Fpage-10%2F</url>
    <content type="text"><![CDATA[对于没有指针的编程语言，可以用数组替代指针，来描述链表。让数组的每个元素由data和cur两部分组成，其中cur相当于链表的next指针，这种用数组描述的链表叫做静态链表，这种描述方法叫做游标实现法。我们对数组的第一个和最后一个元素做特殊处理，不存数据。让数组的第一个元素cur存放第一个备用元素（未被占用的元素）下标，而数组的最后一个元素cur存放第一个有值的元素下标，相当于头结点作用。空的静态链表如下图： 当存放入一些数据时（”甲””乙””丁””戊””己””庚”），静态链表为： 静态链表的插入操作在静态链表第三个位置插入”丙”后，结果如下： 静态链表的删除操作删除”甲”后，静态链表如下： 静态链表的优缺点 静态链表的插入思路：（1）找到带插入索引前一个元素，获取到此时的cur值和下标tmp （2）获取此时首元素存储的cur：备用链表的下标，也是此时待插入元素的下标 – newCur （3）将前一个元素的cur指向此时待插入元素的下标 – newCur； （4）将待插入元素的cur指向原来前一个元素的cur值，tmp （5）将首元素存储的cur变成原来的值+1； 123456789101112131415161718192021222324252627282930/** * 向指定位置插入数据 * 1.先将带插入的这个放在备用链表的第一条，记做k，然后将首元素的游标指向备用链表的下一个的下标k+1 * 2.不在第一条的情况：插入前index-1的位置list[index-1].cur = list[k]的下标 * 3.list[k]的游标指向原来第三个位置处的坐标 * @param index * @param element * @return */ public boolean addTo(int index, Object element) &#123; if (index &lt; -1 || index &gt; length || element == null) &#123; return false; &#125; // 备用链表的第一个元素下标，也是待插入元素位置的下标newcur int newCur = linklist[0].cur; // 拿到前一个元素的下标 int ccur = linklist.length - 1;// 获取第一个有效元素的下标 for (int i = 1; i &lt; index; i++) &#123; ccur = linklist[ccur].cur; &#125; // 出来后ccur=2 int tmp = linklist[ccur].cur;//存储原来前一个元素的cur == 3（此时为3） linklist[ccur].cur = newCur;// 将原来之前有个元素的游标设置为新插入的元素位置的下标（newcur） linklist[newCur].cur = tmp;// 将新插入的这个元素的下标设置为插入前，index元素前一个元素的游标ccur linklist[newCur] = new Node(tmp, element); linklist[0].cur = newCur + 1; length++; return true; &#125; 静态链表的删除思路：（1）找出删除位置的前一个元素的cur，也就是删除位置的下标tmp； （2）根据tmp获取删除位置的cur，用来赋值给前一个元素的cur （3）获取首元素的cur，也就是删除前备用链表的第一个位置的下标newfree； （4）将删除元素的cur设置成newFree；将首元素的cur设置成删除元素的下标；代表这个删除位置已经到备用链表中的第一个位置，下次新增优先插到这个地方； 1234567891011121314151617181920212223242526272829/** * 1.找出前一个元素的cur ，也就是删除位置元素的下标 --- 并将前一个元素的cur指向删除索引的后一个元素的下标 * 2.删除的这个索引处元素进入备用链表的第一个，cur指向原来的备用链表第一个下标，首元素cur指向该索引处元素下标 * * @param index * @return */ public boolean delete(int index) &#123; // 以index = 1为例 if (index &lt; -1 || index &gt; length) &#123; return false; &#125; int ccur = size - 1; for (int i = 1; i &lt; index; i++) &#123; ccur = linklist[ccur].cur; &#125; int tmp = linklist[ccur].cur;// 获取前一个元素的cur，也就是删除元素的下标 int newCur = linklist[tmp].cur;// 获取删除元素的cur linklist[ccur].cur = newCur; int newFree = linklist[0].cur;// 获取原来链表的备用链表的第一个坐标 linklist[0].cur = tmp;// 将首元素的cur设置成删除位置处的下标 linklist[tmp].cur = newFree; size--; return true; &#125; 循环链表将单链表终端结点的指针域由空指针改为指向头结点，形成一个环，这种头尾相接的单链表称为循环列表。 循环列表的结构如下图所示：循环链表的优点：可以从任意一个结点出发，遍历所有结点。 将两个具有尾指针的循环链表合并成一个表非常方便，如下图所示： 合并之后： 双向链表在每个数据结点中都有两个指针，分别指向直接后继和直接前驱，这样的链表称为双向链表。 双向链表的结构如图所示：]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>静态链表</tag>
        <tag>数据结构</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大话数据结构学习笔记（一）]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2Fpage-9%2F</url>
    <content type="text"><![CDATA[补充基础知识～ 数据结构这门课程在以前学习过，但是由于当时学得比较一般就感觉并没有学到什么，于是在朋友的推荐下看《大话数据结构》，对于我这种小白来说是很友好的。整本书都感觉很通俗易懂，不像以前那样几乎看不懂。 第一章 数据结构绪论程序 = 数据结构 + 算法 1.1 数据（data)是描述客观事物的符号，是计算机中可操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。 1.2 数据元素（data element）是组成数据的，有一定意义的基本单位，在计算机中通常作为整理处理，也被成为记录。 1.3 数据项（data item）数据项：一个数据可以由若干个数据项组成；数据项是数据不可分割的最小单位 1.4 数据对象(data object)数据对象：是性质相同的数据元素的集合，是数据的子集。 1.5 数据结构数据结构：是相互之间存在一种或多种特定关系的数据元素集合 总结一下它们之间的关系： 1.6 逻辑结构与物理结构1.6.1 逻辑结构 1.集合结构 集合结构：集合结构中的数据元素除了同属于一个集合外，没有其他关系。 2.线性结构 线性结构：线性结构中的数据元素是一对一的关系. 3.树形结构 树形结构：树形结构中的数据元素之间存在一种一对多的层次关系 4.图形结构 图形结构: 图形结构的数据元素是多对多的关系 1.6.2 物理结构物理结构：是指数据的逻辑结构在计算机中的存储形式。 1.顺序存储结构 开辟一段连续的空间，依次按顺序存放数据元素 2.链式存储结构 现在如银行、医院等地方，设置了排队系统，也就是每个人去了，先领一个号，等着叫号，叫到时去办理业务或看病。在等待的时候，你爱在哪在哪，可以坐着、站着或者走动，甚至出去逛一圈，只要及时回来就行。你关注的是前一个号有没有被叫到，叫到了，下一个就轮到了。 1.7抽象数据类型事实上，抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。 第一章总结 第二章 算法算法：算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。 为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能，这就是算法了。 算法具有五个基本特性：输人、输出、有穷性、确定性和可行性。 算法时间复杂度定义 在进行算法分析时，语句总的执行次数T（n）是关于问题规模n的函数，进而分析T（n）随n的变化情况并确定T（n）的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T（n）=O(f(n))0它表示随问题规模n的增大，算法执行时间的增长率和f（n）的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f（n）是问题规模n的某个函数。 常见的时间复杂度记住logN &gt; 1； 2^n &lt; n! &lt; n^n 就好理解了; ##第二章总结算法的定义：算法是解决特定问题求解步骤的描述，在计算机中为指令的有限序列，并且每条指令表示一个或多个操作。 算法的特性：有穷性、确定性、可行性、输人、输出。 算法的设计的要求：正确性、可读性、健壮性、高效率和低存储量需求。 算法特性与算法设计容易混，需要对比记忆。 算法的度量方法：事后统计方法（不科学、不准确）、事前分析估算方法。在讲解如何用事前分析估算方法之前，我们先给出了函数渐近增长的定义。函数的渐近增长：给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f〔n〕总是比g〔n)大，那么，我们说f〔n)的增长渐近快于g〔n)。于是我们可以得出一个结论，判断一个算法好不好，我们只通过少量的数据是不能做出准确判断的，如果我们可以对比算法的关键执行次数函数的渐近增长性，基本就可以分析出： 某个算法，随着n的变大，它会越来越优于另一算法，或者越来越差于另一算法。 第三章 线性表一、简介1、线性表定义线性表的定义：零个或多个数据元素的有限序列这里有需要注意的几个关键地方： 1.首先他是一个序列，也就是说元素之间是有个先来后到的。 2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继最后一个元素无后继，其他元素都有且只有一个前驱和后继。 3.线性表强调是有限的，事实上无论计算机发展到多钱大，他所处理的元素都是有限的。 使用数学语言来表达的话： a1,…,ai-1,ai,ai+1,…an 表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的直接前驱元素,ai+1是ai的直接后继元素。所以线性表元素的各数n（n&gt;0）定义为线性表的长度，当n=0时，称为空表。 2、抽象数据类型 二、线性表实现及优缺点 1、线性表的顺序存储结构线性表的顺序存储结构，指的是用一段地址连续的存储单元一次存储线性表的数据元素。 线性表（a1,a2,……,an）的顺序存储如下： 事实上物理上的存储方式事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。 总结一下，顺序存储结构封装需要三个属性： 存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置； 线性表的最大存储容量：数组的长度:MaxSize； 线性表的当前长度:length； 注意：数组的长度与线性表的当前长度需要区分一下。数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。 在任意时刻，length &lt;= MaxSize 在线性表的顺序存储结构中，它具有随机存储结构的特点，即直接通过下标获取数据或存储，那储它的时间复杂度为O(1)。而当该结构的数据类型做插入操作时，就不能只插入而不管后面的元素，所以插入操作，也要考虑清楚。 插入算法的思路： 如果插入位置不合理，抛出异常； 如果线性表长度大于等于数组长度，则抛出异常活动太增加数组容量； 最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置； 将要插入元素填入位置i处； 表长加1； Java代码实现： 1234567891011121314/* 初始条件：顺序线性表L已存在，1 &lt;= i &lt;= length *//* 操作结果：在L中第 index 个位置之前插入新的元素e,L的长度加1 */public void add(int i, T e) if (data.length == Maxsize) throw new RuntimeException("数组越界"); if (i &lt; 1 || i &gt; data.length + 1) throw new RuntimeException("数组越界"); if (i &lt;= data.length)&#123; for(int i = data.length - 1; i&gt;= i - 1;k-s-) data[k+1] =data[k]; &#125; data[i-1] = e; data.length++;&#125; 删除算法的思路： 如果删除位置不合理，抛出异常； 取出删除元素； 从删除元素位置开始遍历到最后一个元素，分别将它们都向前移动一个位置； 表长减1 Java代码实现： 12345678910111213141516/* 初始条件：顺序线性表L已存在，1 &lt;= i &lt;= length *//* 操作结果：删除第i元素，并用e返回其值，L的长度减1 */public void remove(int i,T e)&#123; int k; if(data.length == 0) throw new RuntimeException("数组越界"); if(i &lt; 1 || i &gt; data.length throw new RuntimeException("数组越界"); e = data[i - 1]; if(i &lt; data.length) &#123; for(k = i;k &lt; data.length;k++) data[k-1] = data[k]; &#125; data.lenrth--;&#125; 插入和删除的时间复杂度 最好情况：插入和删除操作刚好要求在最后一个位置操作，因为不需要移动任何元素，所以此时的时间复杂度为O(1)。 最坏情况：如果要插入和删除的位置是第一个元素，那就意味着要移动所有的元素向后或者向前，所以这个时间复杂度为O(n)。 平均情况，就取中间值O((n-1)/2)。 这样来看，平均情况复杂度简化后还是O(n)&lt;= MaxSize 线性表顺序存储结构的优缺点： 优点 无需为表中元素之间的逻辑关系而增加额外的存储空间； 可以快速地存取表中任意位置的元素； 缺点 插入和删除操作需要移动大量元素； 当线性表长度变化较大时，难以确定存储空间的容量； 容易造成存储空间的“碎片”； 2、线性表的链式存储结构 对于线性表来说，总得有个头有个尾，链表也不例外。我们把链表中的第一个结点的存储位置叫做头指针，最后一个结点指针为空(NULL)。 在顺序存储结构中，有随机存储结构的特点，计算任意一个元素的存储位置是很容易的，但是在单链表中，想知道其中一个元素的位置，就得从第一个结点开始遍历，因此，对于单链表实现获取第i个元素的数据的操作，在算法上较为复杂。 用java语言描述链式存储结构 123456789101112/** * 定义一个节点结点Node */private class Node&lt;E&gt; &#123; E data; //数据域 Node&lt;E&gt; next; //指针域 public Node(E data, Node&lt;E&gt; next) &#123; this.data = data; this.next = next; &#125;&#125; 算法思路： 声明一个节点p指向链表第一个节点，初始化j从1开始； 当j&lt;i时， 遍历链表，让p的指针向后移动，不断指向下一个节点，j++； 若到链表末尾p为空，则说明第i个元素不存在； 否则查找成功，返回节点p的数据； 单链表数据的获取： 1234567891011121314151617public Node index(int index)&#123; if(index==0)&#123; //头一个结点下标为0 current=head; return current; //删除后链表为空 &#125;else&#123; current=head; for(int i = 0;i &lt; index - 1;i++)&#123; current=current.next; //因为current.next赋值给了current，所以要设置为index-1 &#125; &#125; return current; &#125; 单链表的插入：算法思路： 声明一个指针p指向链表的第一个结点，初始化j从1开始 当j&lt;i时，就遍历链表，让p指针向后移动一位，不断地指向下一个结点，j++； 若到链表末尾p为空，则说明第i个结点不存在 否则查找成功，在系统中生成一个空节点s 将数据元素e赋值给s-&gt;data 单链表的插入标准语句，s-&gt;next = p-&gt;next,p-&gt;next=s; 返回成功 12345678910111213141516171819202122232425262728293031323334/** * 获取第i个结点（包括第0个结点，头结点） * 获取结点值只需要GetNode(i).data即可，不再写方法了 */public Node&lt;E&gt; GetNode(int i) &#123; if (i &lt; 0 || i &gt; count) &#123; throw new RuntimeException("元素位置错误！"); &#125; else if (i == 0) &#123; return head; //第0个节点为head &#125; else &#123; //1 &lt;= i &lt;= count Node&lt;E&gt; node = head.next; for (int k = 1; k &lt; i; k++) &#123; node = node.next; &#125; return node; &#125;&#125;/** * 第i个位置插入新的元素 */public void ListInsert(int i, E e) &#123; if (i &lt; 1 || i &gt; count + 1) &#123; throw new RuntimeException("插入位置错误！"); &#125; else &#123; Node&lt;E&gt; newNode = new Node&lt;E&gt;(e, null); newNode.next = GetNode(i - 1).next; //因为GetNode()方法中包含了获取头结点，所以不需单独判断了 GetNode(i - 1).next = newNode; count++; System.out.println("插入成功！"); &#125;&#125; 单链表的删除：算法思路： 一个指针p指向链表的第一个结点，初始化j从1开始 当j&lt;i时，就遍历链表，让p指针向后移动一位，不断地指向下一个结点，j++； 若到链表末尾p为空，则说明第i个结点不存在 否则，查找成功，将欲删除的结点p-&gt;next赋给q 单链表的删除标准语句p-&gt;next=q-&gt;next 将q结点中的数据赋给e，作为返回 释放q结点 返回成功 12345678910111213141516171819202122232425262728293031323334/** * 获取第i个结点（包括第0个结点，头结点） * 获取结点值只需要GetNode(i).data即可，不再写方法了 */public Node&lt;E&gt; GetNode(int i) &#123; if (i &lt; 0 || i &gt; count) &#123; throw new RuntimeException("元素位置错误！"); &#125; else if (i == 0) &#123; return head; //第0个节点为head &#125; else &#123; //1 &lt;= i &lt;= count Node&lt;E&gt; node = head.next; for (int k = 1; k &lt; i; k++) &#123; node = node.next; &#125; return node; &#125;&#125;/*** 删除第i个位置元素，并返回其值*/public E ListDelete(int i) &#123; if (i &lt; 1 || i &gt; count) throw new RuntimeException("删除位置错误！"); Node&lt;E&gt; node = GetNode(i); E e = node.data; GetNode(i - 1).next = node.next; node = null; count--; System.out.println("删除成功!"); return e;&#125; 单链表的查找元素，0代表失败：算法思路： 首先定义一个node节点，node结点为head结点的下一个结点，然后判断node结点的数据是否等于e,若等于e则表示成功，返回1；若不等于e,则从第一个元素开始从前到后便利每一个元素， node = node.next;然后判断node结点的数据是否等于e,若等于则返回k+1; 12345678910111213141516/** * 查找元素，0代表查找失败 */public int LocateElem(E e) &#123; Node&lt;E&gt; node; node = head.next; if (node.data == e) return 1; for (int k = 1; k &lt; count; k++) &#123; node = node.next; if (node.data == e) return k + 1; &#125; System.out.println("查找失败！"); return 0;&#125; 实现程序 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152package com.tongcaipay.merchant.apply.study;/** * 说明： * 1.《大话数据结构》中没有线性表的长度，但提到可以存储于头节点的数据域中。 * 本程序的线性表长度存放于count变量中，线性表长度可以使程序比较方便。 * 2.程序中，第i个位置代表第i个结点，头结点属于第0个结点 * 3.因为链表为泛型，整表创建采用整型（随机整数做元素），所以有出现一些类型转换 * 4.Java程序的方法一般以小写开头，但为和书上一致，程序中方法采用了大写开头。 * * 注意点： * 1.count在增删元素时要加一或减一千万别忘了 * 2.清空线性表要每个元素都null * * @ xiao lei * */public class LinkList&lt;E&gt; &#123; private Node&lt;E&gt; head; //头结点 private int count; //线性表长度 /** * 定义一个节点结点Node */ private class Node&lt;E&gt; &#123; E data; //数据域 Node&lt;E&gt; next; //指针域 public Node(E data, Node&lt;E&gt; next) &#123; this.data = data; this.next = next; &#125; &#125; /** * 线性表的初始化 */ public LinkList() &#123; head = new Node&lt;E&gt;(null,null); //不是head=null; count = 0; //线性表第长度 &#125; /** * 判断线性表是否为空 */ public boolean IsEmpty() &#123; if (count == 0) &#123; System.out.println("表为空！"); return true; &#125; else &#123; System.out.println("表不为空！"); return false; &#125; //return count==0; &#125; /** * 清空线性表 */ public void ClearList() &#123; Node&lt;E&gt; node; while (count != 0) &#123; node = head.next; head.next = node.next; node = null; count--; &#125; System.out.println("线性表已清空！"); &#125; /** * 获取第i个结点（包括第0个结点，头结点） * 获取结点值只需要GetNode(i).data即可，不再写方法了 */ public Node&lt;E&gt; GetNode(int i) &#123; if (i &lt; 0 || i &gt; count) &#123; throw new RuntimeException("元素位置错误！"); &#125; else if (i == 0) &#123; return head; //第0个节点为head &#125; else &#123; //1 &lt;= i &lt;= count Node&lt;E&gt; node = head.next; for (int k = 1; k &lt; i; k++) &#123; node = node.next; &#125; return node; &#125; &#125; /** * 获取第i个结点的数据(包括头结点) */ public E GetData(int i) &#123; return GetNode(i).data; &#125; /** * 查找元素，0代表查找失败 */ public int LocateElem(E e) &#123; Node&lt;E&gt; node; node = head.next; if (node.data == e) return 1; for (int k = 1; k &lt; count; k++) &#123; node = node.next; if (node.data == e) return k + 1; &#125; System.out.println("查找失败！"); return 0; &#125; /** * 第i个位置插入新的元素 */ public void ListInsert(int i, E e) &#123; if (i &lt; 1 || i &gt; count + 1) &#123; throw new RuntimeException("插入位置错误！"); &#125; else &#123; Node&lt;E&gt; newNode = new Node&lt;E&gt;(e, null); newNode.next = GetNode(i - 1).next; //因为GetNode()方法中包含了获取头结点，所以不需单独判断了 GetNode(i - 1).next = newNode; count++; System.out.println("插入成功！"); &#125; &#125; /** * 删除第i个位置元素，并返回其值 */ public E ListDelete(int i) &#123; if (i &lt; 1 || i &gt; count) &#123; throw new RuntimeException("删除位置错误！"); &#125;else &#123; Node&lt;E&gt; node = GetNode(i); E e = node.data; GetNode(i - 1).next = node.next; node = null; count--; System.out.println("删除成功!"); return e; &#125; &#125; /** * 获取线性表长度 */ public int ListLength() &#123; return count; &#125; 测试代码： 基本数据类型和引用类型各写了一个测试代码。 12345678910111213141516171819202122232425262728293031public static void main(String[] args) &#123; LinkList&lt;Integer&gt; nums = new LinkList&lt;Integer&gt;(); System.out.println("——————————插入5个元素到表中,并读取内容——————————"); for (int i = 1; i &lt;= 5; i++) nums.ListInsert(i, 2 * i); nums.IsEmpty(); int num; for (int i = 1; i &lt;= 5; i++) &#123; num = nums.GetData(i); System.out.println("第" + i + "个位置的值为：" + num); &#125; System.out.println("——————————查找0、2、10是否在表中——————————"); System.out.print("0的位置："); System.out.println(nums.LocateElem(0)); System.out.print("2的位置："); System.out.println(nums.LocateElem(2)); System.out.print("10的位置："); System.out.println(nums.LocateElem(10)); System.out.println("——————————删除2、10——————————"); num = nums.ListDelete(1); System.out.println("已删除：" + num); num = nums.ListDelete(4); System.out.println("已删除：" + num); System.out.println("当前表长：" + nums.ListLength()); for (int i = 1; i &lt;= nums.ListLength(); i++) &#123; num = nums.GetData(i); System.out.println("第" + i + "个位置的值为：" + num); &#125; nums.ClearList(); nums.IsEmpty(); &#125; 实验结果： 单链表与顺序存储结构的对比：]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构</tag>
        <tag>线性表</tag>
        <tag>单链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LinkList详解]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2Fpage-8%2F</url>
    <content type="text"><![CDATA[1.LinkedList类定义 123public class LinkedList&lt;E&gt; extends AbstractSequentialList&lt;E&gt; implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable LinkedList 是一个继承于 AbstractSequentialList 的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。 LinkedList 实现 List 接口，能对它进行队列操作。 LinkedList 实现 Deque接口，即能将LinkedList当作双端队列使用。 LinkedList 实现了 Cloneable 接口，即覆盖了函数clone()，能克隆。 LinkedList 实现 java.io.Serializable 接口，这意味着LinkedList支持序列化，能通过序列化去传输。 LinkedList 是非同步的。 LinkedList的类图关系： 2.LinkedList数据结构LinkedList的成员变量很少且只有三个：代表节点个数的 size，前驱pre和后继last。Java中的LinkedList的数据结构是一个双向非循环链表，由内部类Node定义： 12345678private class Node&lt;T&gt; &#123; T data; Node&lt;T&gt; next;//后继 Node&lt;T&gt; pre;//前驱 Node(T t) &#123; this.data = t; &#125;｝ 3.构造器定义一个first,last,以及链表当长度，但是头部和尾部要设置为空。 1234567Node&lt;T&gt; frist; //头部Node&lt;T&gt; last; //尾部int size;//链表长度//底层数组public LinkedList() &#123; frist = last = null;&#125; 4.LinkedList核心操作: add(T e) add(int index, T e) set(int index, T e) get(int index) remove(int index) remove(T e) int size() boolean isEmpty() forEach(Consumer action) 1) add(T e)在末尾添加一个元素 12345678910111213@Overridepublic void add(T e) &#123; Node&lt;T&gt; n = new Node&lt;T&gt;(e); if (last == null) &#123; frist = n; last = n; &#125; else &#123; last.next = n;//最后一个元素下一个为此次添加的元素 n.pre = last;//添加元素的前驱指前一个元素 last = n;//此时最后一个元素为刚添加进入的 &#125; size++; &#125; 说明：当在末尾添加元素的时候，先要判断尾部元素是否为空，若为空则说明只有一个元素，则直接把该元素放在里面；若尾部元素不为空的，则最后一个元素下一个为此次添加的元素，添加的元素的前驱指向前一个元素，那么此时最后一个元素为刚刚添加进入的。2) add(int index, T e) 在指定下标 index 位置中添加一个元素 123456789101112131415161718192021222324252627282930313233private Node&lt;T&gt; getNode(int index) &#123; if (index &gt;= size || index &lt; 0) &#123; throw new RuntimeException("数组越界"); &#125; Node temp = frist; for (int i = 0; i &lt; index; i++) &#123; temp = temp.next; &#125; return temp;&#125;@Overridepublic void add(int index, T e) &#123; Node&lt;T&gt; newNode = new Node&lt;T&gt;(e); // 数组越界 if (index &lt; 0 || index &gt; size) &#123; throw new RuntimeException("数组越界"); &#125; // 末尾元素 if (index == size) &#123; last.next = newNode; newNode.pre = last; last = newNode; size++; return; &#125; // 中间元素 Node temp = getNode(index); temp.pre.next = newNode; newNode.pre = temp.pre; temp.pre = newNode; newNode.next = temp; size++;&#125; 说明：此时需要进行分段考虑。 当 index &lt; 0 或者 index &gt; size 时，则为数组越界 当 index = size 时，此时相当于在末尾添加一个元素，在链表当范围之内，所以直接添加进去。 最后一种情况就是当在中间元素的时候，此时就比较麻烦，需要改变next和pre的方向。 3) set(int index, T e)在指定下标 index 位置中设置一个元素，返回旧值 123456789101112131415161718192021222324252627282930private Node&lt;T&gt; getNode(int index) &#123; if (index &gt;= size || index &lt; 0) &#123; throw new RuntimeException("数组越界"); &#125; Node temp = frist; for (int i = 0; i &lt; index; i++) &#123; temp = temp.next; &#125; return temp;&#125;@Overridepublic T set(int index, T e) &#123; //数组越界 if (index &gt; size || index &lt; 0) &#123; throw new RuntimeException("数组越界"); &#125; else if (index == size) &#123; Node&lt;T&gt; newNode = new Node&lt;&gt;(e); last.next = newNode; newNode.pre = last; last = newNode; size++; return null; &#125; else &#123; //中间元素 Node&lt;T&gt; node = getNode(index); T oldData = node.data; node.data = e; return oldData; &#125;&#125; 说明：此时还是需要进行分段讨论 当 index &lt; 0 或者 index &gt; size 时，则为数组越界 当 index = size 时，此时相当于在末尾设置元素，在链表当范围之内，所以直接添加进去。 当在中间设置时，首先设置下标为index的元素oldData为node.data,再将元素e赋值为node.data, 最后返回oldData的值。 4) get(int index)根据指定下标获取元素 12345678@Overridepublic T get(int index) &#123; if (index &lt; size &amp;&amp; index &gt;= 0) &#123; return getNode(index).data; &#125; else &#123; throw new RuntimeException("数组越界"); &#125;&#125; 说明：当 0&lt;=index&lt;size时，返回指定下标下的值；其余情况下为数组越界。 5) remove(int index)根据指定下标 index 删除指定元素，并返回删除的值 1234567891011121314151617181920@Overridepublic T remove(int index) &#123; if (index &lt; 0 || index &gt;= size) &#123; throw new RuntimeException("数组越界"); &#125; if(index == 0)&#123; Node&lt;T&gt; node = frist; frist = frist.next; size--; return node.data; &#125;else&#123; Node&lt;T&gt; temp = getNode(index); temp.next.pre = temp.pre; //再将temp的前驱的后继指向temp的后继 temp.pre.next = temp.next; size--; return temp.data; &#125;&#125; 说明：此时需要进行分组讨论： 当index &lt; 0 或者 index &gt;= size时，此时为数组越界 当 index = 0时，此时只有一个空链表。如图所示，然后 中间元素的删除： 5) boolean remove(T e)删除指定的值，并返回是否删除成功 12345678910@Overridepublic boolean remove(T e) &#123; for (int i = 0; i &lt; size; i++) &#123; if (get(i).equals(e)) &#123; remove(i); break; &#125; &#125; return true;&#125; 6) int size()获取列表大小 1234@Overridepublic int size() &#123; return size;&#125; 7) boolean isEmpty()判断是否为空 12345678@Overridepublic boolean isEmpty() &#123; if (size == 0) &#123; return true; &#125; else &#123; return false; &#125;&#125; 8) forEach(Consumer action)遍历所有元素 12345678@Overridepublic void forEach(Consumer&lt;T&gt; action) &#123; Node&lt;T&gt;currentNode = frist; while (currentNode != null) &#123; action.accept(currentNode.data); currentNode = currentNode.next; &#125;&#125; 5.总结 LinkedList使用了循环双向链表数据结构进行实现，通过改动指针的方向来添加或删除某个元素，但是读的速度很慢，删除很方便。 6.源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189package com.tongcaipay.merchant.apply.study;import java.util.function.Consumer;public class LinkedList&lt;T&gt; implements List&lt;T&gt; &#123; private class Node&lt;T&gt; &#123; T data; Node&lt;T&gt; next;//后继 Node&lt;T&gt; pre;//前驱 Node(T t) &#123; this.data = t; &#125; &#125; Node&lt;T&gt; frist; //头部 Node&lt;T&gt; last; //尾部 int size;//链表长度 //底层数组 public LinkedList() &#123; frist = last = null; &#125; @Override public void add(T e) &#123; Node&lt;T&gt; n = new Node&lt;T&gt;(e); if (last == null) &#123; frist = n; last = n; &#125; else &#123; last.next = n;//最后一个元素下一个为此次添加的元素 n.pre = last;//添加元素的前驱指前一个元素 last = n;//此时最后一个元素为刚添加进入的 &#125; size++; &#125; private Node&lt;T&gt; getNode(int index) &#123; if (index &gt;= size || index &lt; 0) &#123; throw new RuntimeException("数组越界"); &#125; Node temp = frist; for (int i = 0; i &lt; index; i++) &#123; temp = temp.next; &#125; return temp; &#125; @Override public void add(int index, T e) &#123; Node&lt;T&gt; newNode = new Node&lt;T&gt;(e); // 数组越界 if (index &lt; 0 || index &gt; size) &#123; throw new RuntimeException("数组越界"); &#125; // 末尾元素 if (index == size) &#123; last.next = newNode; newNode.pre = last; last = newNode; size++; return; &#125; // 中间元素 Node temp = getNode(index); temp.pre.next = newNode; newNode.pre = temp.pre; temp.pre = newNode; newNode.next = temp; size++; &#125; @Override public T set(int index, T e) &#123; //数组越界 if (index &gt; size || index &lt; 0) &#123; throw new RuntimeException("数组越界"); &#125; else if (index == size) &#123; Node&lt;T&gt; newNode = new Node&lt;T&gt;(e); last.next = newNode; newNode.pre = last; last = newNode; size++; return null; &#125; else &#123; //中间元素 Node&lt;T&gt; node = getNode(index); T oldData = node.data; node.data = e; return oldData; &#125; &#125; @Override public T get(int index) &#123; if (index &lt; size &amp;&amp; index &gt;= 0) &#123; return getNode(index).data; &#125; else &#123; throw new RuntimeException("数组越界"); &#125; &#125; @Override public T remove(int index) &#123; if (index &lt; 0 || index &gt;= size) &#123; throw new RuntimeException("数组越界"); &#125; if(index == 0)&#123; Node&lt;T&gt; node = frist; frist = frist.next; size--; return node.data; &#125;else&#123; Node&lt;T&gt; temp = getNode(index); temp.next.pre = temp.pre; //再将temp的前驱的后继指向temp的后继 temp.pre.next = temp.next; size--; return temp.data; &#125; &#125; @Override public boolean remove(T e) &#123; for (int i = 0; i &lt; size; i++) &#123; if (get(i).equals(e)) &#123; remove(i); break; &#125; &#125; return true; &#125; @Override public int size() &#123; return size; &#125; @Override public boolean isEmpty() &#123; if (size == 0) &#123; return true; &#125; else &#123; return false; &#125; &#125; @Override public void forEach(Consumer&lt;T&gt; action) &#123; Node&lt;T&gt;currentNode = frist; while (currentNode != null) &#123; action.accept(currentNode.data); currentNode = currentNode.next; &#125; &#125; public static void main(String[] args) &#123; List&lt;String&gt; list = new LinkedList&lt;&gt;(); list.add("1"); list.add("2"); list.add("3"); list.add("4"); //list.add(3,"1"); list.remove(7); //list.set(5,"1"); //System.out.println(list.size()); //System.out.println(list.get(4)); //System.out.println(list.remove(3)); //System.out.println(list.isEmpty()); //System.out.println(list.size()); list.forEach(item -&gt; &#123; System.out.println(item); &#125;); &#125;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>LinkList</tag>
        <tag>循环链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈ArrayList]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2Fpage-7%2F</url>
    <content type="text"><![CDATA[一、ArrayList的继承体系及性质1.ArrayList的继承体系ArrayList类继承AbstractList类，实现List等多个接口： AbstractList类又继承AbstractCollection类，实现List接口： AbstractCollection类实现Collection接口： Collection接口继承Iterable接口： List接口继承Collection接口： 所以ArrayList总体继承体系为： 二、ArrayList的方法使用和源码解析1.构造方法： 123456789101112private Object[] array; //定义一个泛型的数组arrayprivate int size; //当前数组长度public ArrayList() &#123; array = new Object[10]; //默认情况下使用ArrayList会生成一个大小为10的Object类型的数组&#125;public ArrayList(int capacity) &#123; array = new Object[capacity]; //新建一个用户初始值大小的object数组。&#125; 默认情况下使用ArrayList会生成一个大小为10的Object类型的数组。 实例： 12345678910111213141516171819public static void main(String[] args) &#123; List&lt;String&gt; list1 = new ArrayList&lt;&gt;(); list1.add("1"); list1.add("2"); list1.add("3"); list1.add("4"); //list1.add(3,"1"); list1.remove("2"); //list1.set(2,"1"); //System.out.println(list1.size()); //System.out.println(list1.get(4)); //System.out.println(list1.remove(3)); //System.out.println(list1.isEmpty()); //System.out.println(list1.size()); list1.forEach(item -&gt; &#123; System.out.println(item); &#125;); &#125; 2.add(T e)方法功能：在末尾添加一个元素。 1234@Overridepublic void add(T e) &#123; array[size++] = e;&#125; 在数组的末尾元素时，当前的数组长度加一。 3.add(int index, T e)方法功能：在指定下标 index 位置中设置一个元素，返回旧值 说明：加入元素e之前先要检查数组到大小首先检查index的值是否在0到size之间，可以为size.然后将index以及后面的元素向后面移动一位，将e放在index位置，size++。如果下标index不在0到size之间，则说明数组越界。 123456789101112@Overridepublic void add(int index, T e) &#123; if (index &gt; 0 &amp;&amp; index &lt;= size) &#123; for (int i = size - 1; i &gt;= size; i--) &#123; array[i + 1] = array[i]; &#125; array[index] = e; size++; &#125;else&#123; throw new RuntimeException("数组越界"); &#125;&#125; 4.set(int index, T e)方法功能：在指定下标 index 位置中设置一个元素，返回旧值 123456789101112@Overridepublic T set(int index, T e) &#123; if (index &gt; size || index&lt;0 ) &#123; throw new RuntimeException("数组越界"); &#125;else if(index == size)&#123; array[index] = e; size++; &#125; else &#123; array[index] = e; &#125; return null; ｝ 将e放到ArrayList下标为index的位置，此时就要分情况来讨论： 当 index &lt; 0 或者 index &gt; size，说明数组越界了 当 index = size 时，相当于数组在末尾添加了一个新的元素，此时直接把元素e放在下标等于index的位置，当前size＋＋。 当 0&lt;=index&lt;size 时，说明在当前数组内，则直接把直接把元素e放在下标等于index的位置／ 5.get(int index)方法功能：返回指定下标为index的元素 1234567@Overridepublic T get(int index) &#123; if(index &lt; size &amp;&amp; index&gt;=0) &#123; return (T) array[index]; &#125;else &#123; throw new RuntimeException("数组越界");&#125; 说明：获取指定元素的时候，当 0&lt;=index&lt;size 时，此时在数组内，返回指定下标元素，其余情况数组越界会抛异常。 6.remove(int index)方法功能：根据指定下标 index 删除指定元素，并返回删除的值 12345678910111213@Overridepublic T remove(int index) &#123; if(index&gt;=0 &amp;&amp; index&lt;size) &#123; Object m = array[index]; //获取删除元素的值 for (int i = index+1 ;i&lt;=size-1;i++)&#123; array[i-1] = array[i]; //将index后面所有的元素往前移一位。 &#125; size--; return (T) m; &#125;else &#123; throw new RuntimeException("数组越界"); &#125;&#125; 说明: 删除指定下标为index的元素的值前，首先要确定其范围，当 0&lt;=index&lt;size 时，此时在数组内，可以进行删除操作。首先获取要删除的元素的值将其定义成一个泛型 m,随后将下标为index后面的元素往前移动一位，比如将array[index＋1]移动到array[index]上，以此类推，然后数组当前大小还要－1，最后返回删除的m的值。如果不在0&lt;=index&lt;size视为数组越界。 7.boolean remove(Object o)方法功能： 删除指定的值为e，并返回是否删除成功 123456789101112131415161718192021222324@Override//删除元素//只会删除第一个出现的元素。public boolean remove(Object o) &#123; if (o == null)&#123; // for循环遍历元素。找出待删除元素的index for (int index = 0;index &lt; size;index++)&#123; if (array[index] == null) &#123; remove(index); //此处导致只会删除第一个找到的相等元素 return true; &#125; &#125;else&#123; // for循环遍历元素。找出待删除元素的index for (int index = 0; index &lt; size; index++) &#123; if (e.equals(array[index])) &#123; remove(index); //此处导致只会删除第一个找到的相等元素 return true; &#125; &#125; &#125; return false;&#125; 8.int size()方法功能： 获取列表大小 123public int size() &#123; return size; &#125; 9.boolean isEmpty()方法功能： 判断是否为空 123456789@Overridepublic boolean isEmpty() &#123; if(size == 0)&#123; return true; &#125;else&#123; return false; &#125; &#125;&#125; 10.forEach(Consumer action)方法功能：遍历整改数组 123456@Overridepublic void forEach(Consumer&lt;T&gt; action) &#123; for(int i = 0;i&lt;size;i++)&#123; action.accept((T) array[i]); &#125;&#125; 三、总结Arraylist实现是基于动态数组点数据结构，动态大小是可变的，随机访问和遍历元素时，提供更好的性能。读的速度很无奈快，删除很麻烦。 推荐: 1.ArrayList-你可能需要知道这些 2.Java入门系列：实例讲解ArrayList用法]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>ArrayList</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法—希尔排序]]></title>
    <url>%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2Fpage-6%2F</url>
    <content type="text"><![CDATA[1.基本思想希尔排序的基本思想就是：将需要排序的序列划分为若干个较小的序列，对这些序列进行直接插入排序，通过这样的操作可使需要排序的数列基本有序，最后再使用一次直接插入排序。 在希尔排序中首先要解决的是怎样划分序列，对于子序列的构成不是简单地分段，而是采取将相隔某个增量的数据组成一个序列。一般选择增量的规则是：取上一个增量的一半作为此次子序列划分的增量，一般初始值元素的总数量。 算法步骤 代码实现 1234567891011121314151617181920212223242526272829package com.tongcaipay.merchant.apply.study;import java.util.Arrays;//希尔排序算法public class ShellSort &#123; public static void sort(int[] arr) &#123; // 缩小增量gap的范围 for (int gap = arr.length / 2; gap &gt; 0; gap = gap / 2) &#123; for (int i = gap; i &lt; arr.length; i++) &#123; int j = i; int temp = arr[j]; while (j - gap &gt;= 0 &amp;&amp; temp &lt; arr[j - gap]) &#123; arr[j] = arr[j - gap]; j = j - gap; &#125; arr[j] = temp; &#125; &#125; &#125; public static void main(String[] args) &#123; int []arr = &#123;10,10,4,8,9,6,5&#125;; sort(arr); System.out.println(Arrays.toString(arr)); &#125;&#125; 2.代码实现]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法－快速排序]]></title>
    <url>%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2Fpage-5%2F</url>
    <content type="text"><![CDATA[快速排序算法是冒泡排序的一种改进，快速排序也是通过逐渐消除待排序的无序序列中逆序元素来实现排序的。 1.算法思想(1) 我们从待排序的记录序列中选取一个记录(通常第一个)作为基准元素(称为temp) temp = arr[low]，然后设置两个变量，low指向数列的最左部，high指向数据的最右部。 (2) temp首先与 arr[high] 进行比较，如果 arr[high] &lt; temp，则arr[low] = arr[high] 将 high 的值赋值给low;如果arr[high] &gt; temp则我们只需要将 high–(high向左移动)。high– 之后，再拿arr[hirh]与temp进行比较，直到arr[high] &lt; temp交换元素为止。 (3) 如果右边存在arr[high] &lt; temp的情况，将arr[low] = arr[high]，接下来，将转向low端，拿arr[low]与temp进行比较，如果arr[low] &gt; temp,则将arr[high] = arr[low]，如果arr[low] &lt; temp，则只需要将 low++,然后再进行arr[low] 与 temp的比较。 (4) 然后再移动high重复上述步骤 (5) 最后得到 {23 58 13 10 57 62} 65 {106 78 95 85}，再对左子数列与右子数列进行同样的操作。最终得到一个有序的数列。 2.算法实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.tongcaipay.merchant.apply.study;import java.util.Arrays;public class quickSort &#123; /** * 定义一个要排序的数组 arr[low...high] * @param low 数组arr[]的左下标 * @param high 数组arr[]的右下标 */ /*对数组arr[low...high]进行排序*/ private static void quickSort(int[] arr, int low, int high) &#123; if (low &lt; high) &#123; //对数组进行分割，取出下次分割的基准标号 int index = getIndex(arr, low, high); //算出枢轴值index quickSort(arr, low, index - 1); //对index左侧对数组进行递归切割 quickSort(arr, index + 1, high); //对index右侧对数组进行递归切割 &#125; &#125; private static int getIndex(int[] arr, int low, int high) &#123; int temp = arr[low]; //用数组的第一个作为基准数据 while (low &lt; high) &#123; //当队尾元素大于等于temp时，下标high向前移动 while (low &lt; high &amp;&amp; arr[high] &gt;= temp) &#123; high--; &#125; //当队尾元素小于temp时，将其赋值给low; //当队首元素小于等于temp时，下标low向后移动 while (low &lt; high &amp;&amp; arr[low] &lt;= temp) &#123; low++; &#125; //当队首元素大于temp时，将其赋值给high arr[high] = arr[low]; &#125; arr[high] = arr[low] = temp; //此时high = low return high; // 返回tmp的正确位置 //return low; &#125; public static void main(String[] args) &#123; int arr[] = &#123;23, 58, 13, 10, 57, 62, 106, 78,95,85&#125;; System.out.println("排序前："+Arrays.toString(arr)+" "); quickSort(arr, 0, arr.length - 1); System.out.println("排序后："+Arrays.toString(arr)+" "); &#125;&#125; 运行结果：]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法—归并排序]]></title>
    <url>%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2Fpage-4%2F</url>
    <content type="text"><![CDATA[一、前言归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。 二、算法思想该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。 分而治之： 1、分阶段可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程，递归深度为logn。 2、治阶段 再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤。 3.代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.tongcaipay.merchant.apply.study;import java.util.Arrays;public class MergingSort &#123; /** * 定义一个要排序的数组 arr[m...n] * * @param m 数组arr[]的左下标 * @param n 数组arr[]的右下标 */ public static void mergeSort(int[] arr, int m, int n) &#123; if (m == n) &#123; //当m=n时，数组内只有一个元素 &#125; else &#123; //1.将数组一分为二 int center = (m + n) / 2; //将arr1[m...n]分成arr1[m...center]和arr1[center+1...n] //2.将数组arr1[m...center]排序 mergeSort(arr, m, center); //3.将数组arr1[center+1...n]排序 mergeSort(arr, center + 1, n); //4.合并两个数组 merge(arr, m, center, n); &#125; &#125; /** * 将arr1[m...center]和arr1[center+1...n]归并为一个有序数组 */ public static void merge(int[] arr, int m, int center, int n) &#123; int[] temp = new int[n - m + 1]; int i = m; //左指针 int j = center + 1; //右指针 int k = 0; int l; //先把较小的数移入数组 while (i &lt;= center &amp;&amp; j &lt;= n) &#123; if (arr[i] &lt; arr[j]) &#123; temp[k] = arr[i]; k = k + 1; i = i + 1; &#125; else&#123; temp[k] = arr[j]; k = k + 1; j = j + 1; &#125; &#125; // 上面的循环退出后，把剩余的元素依次填入到temp中 // 以下两个while只有一个会执行 //把左边剩余的数移入数组 while (i &lt;= center) &#123; temp[k] = arr[i]; k = k + 1; i = i + 1; &#125; //把右边剩余的数移入数组 while (j &lt;= n) &#123; temp[k] = arr[j]; k = k + 1; j = j + 1; &#125; for (int k2 = 0; k2 &lt; temp.length; k2++) &#123; //把temp[]里的数组复制到arr[]里 arr[k2 + m] = temp[k2]; &#125; &#125; public static void main(String[] args) &#123; int arr[] = &#123;5, 4, 7, 9, 3, 8, 2, 1&#125;; mergeSort(arr, 0, arr.length - 1); System.out.print(Arrays.toString(arr)); &#125;&#125; 运行结果： 算法分析(以我的代码为例)： 分阶段： 治阶段 三、复杂度 时间复杂度：O(nlogn) 空间复杂度：O(N) 归并排序需要一个与原数组相同长度的数组做辅助来排序稳定性：归并排序是稳定的排序算法;这行代码可以保证当左右两部分的值相等的时候，先复制左边的值，这样可以保证值相等的时候两个元素的相对位置不变。 推荐：排序算法总结]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2FMarkdown%2Fpage-3%2F</url>
    <content type="text"><![CDATA[开始写博客的时候我们需要使用编辑器来写，这时我们就需要掌握一种基本的语法—Markdown 语法Markdown 是一种轻量级且易于使用的语法，用于在GitHub平台上设置所有形式的书写样式。 接下来就简单来讲讲 Markdown 语法的使用。 Markdown语法分为如下几大部分： 一、标题两种形式 1）使用＝和－,标记 一级 和 二级 标题。 示例md代码： 一级标题 = 二级标题 - 示例效果： 2）使用#,可以表示 1-6级 标题。 示例md代码： # 第一级标题 ## 第二级标题 ### 第三级标题 #### 第四级标题 ##### 第五级标题 ###### 第六级标题 示例效果: 二、段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车) 三、区块引用在段落的每行或者只在第一行使用符号 &gt; ,还可使用多个嵌套引用，如： 示例md代码: &gt; 区块引用 &gt; &gt; 嵌套引用 &gt; &gt; &gt;三嵌套引用 &gt; &gt; &gt; &gt; 四嵌套引用示例效果: 四、代码1.单行代码代码之间分别用一个反引号包起来 示例md代码: `代码内容`示例效果: 2.代码块代码之间分别用三个反引号包起来，且两边的反引号单独占一行。 注意：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例md代码: function fun(){ echo &quot;这是一句非常牛逼的代码&quot;; } fun();示例效果: 1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); 五、强调在强调内容两侧分别加上*或者-,如： 示例md代码: *斜体* ，_斜体_ **加粗**，__粗体__示例效果: 六、列表1.无序列表a.使用＋、或 - 标记无序列表，如： 示例md代码: - 第一项 + 第二项 - 第三项 + 第四项 - 第五项 + 第六项 示例效果: b.使用* 标记无序列表，如： 示例md代码: * 第一项 * 第二项 * 第三项 * 第四项 * 第五项 * 第六项 示例效果: 2.无序列表语法：数字加点 示例md代码: 1. 列表内容 2. 列表内容 3. 列表内容示例效果: 3.列表嵌套列表嵌套只需在子列表中的选项添加四个空格即可。 示例md代码: 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 * 第一项: - 第一项嵌套的第一个元素 - 第二项嵌套的第一个元素 * 第一项: 1. 第一项嵌套的第一个元素 2. 第二项嵌套的第一个元素 1. 第一项： 1. 第一项嵌套的第一个元素 2. 第一项嵌套的第二个元素 示例效果: 七、分割线分割线最常使用就是三个或以上的* ,＝ ,- ,_。 示例md代码： *** --- _____ ---示例效果: 八、链接链接使用方法如下： [链接名称](链接地址) 或者 &lt;链接地址&gt;例如： 这是一个链接 [菜鸟教程](https://www.runoob.com)显示结果如下： 直接使用链接地址： &lt;https://www.runoob.com&gt;显示结果如下： 1.高级链接链接也可以用变量来代替，文档末尾附带变量地址： 这个链接用 1 作为网址变量 [Google][1] 这个链接用 runoob 作为网址变量 [Runoob][runoob] 然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/显示结果如下： 九、图片Markdown 图片语法格式如下： ![alt 属性文本](图片地址) ![alt 属性文本](图片地址 &quot;可选标题&quot;) 开头一个感叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。 当然，你也可以像网址那样对图片网址使用变量: 这个链接用 1 作为网址变量 [RUNOOB][1]. 然后在文档的结尾位变量赋值（网址） [1]: http://static.runoob.com/images/runoob-logo.png显示结果如下： Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的&lt;img&gt;标签。 &lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;显示结果如下： 十、表格Markdown 制作表格使用|来分隔不同的单元格，使用-来分隔表头和其他行。 语法格式如下： | 表头 | 表头 | | ---- | ---- | | 单元格 | 单元格 | | 单元格 | 单元格 |显示结果如下： 1.对齐方式我们可以设置表格的对齐方式： -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 实例如下： | 左对齐 | 右对齐 | 居中对齐 | | :-----| ----: | :----: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 |显示结果如下： 总结目前这些就是一些比较基础的Markdown语法，对于写博客的话应该是够用了，未完待续中……]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo+yilia搭建自己的博客网站（二）进阶笔记]]></title>
    <url>%2FHexo%2Fpage-2%2F</url>
    <content type="text"><![CDATA[前言：继上次把博客搭建好之后，我便开始学习MacDown语法开始写博客，可以参考github官网上的教程：MacDown语法，MacDown语法其实很简单的，学起来也很快，后续我会单独来用一篇文章来讲其语法。今天我主要是给大家介绍一下这是我在Yilia这个主题下的参考很多前人的经验并且在个人博客上验证的功能的记录。 一、头像/图标设置1.存放位置头像、图标图片的存放位置是 /themes/yilia/source/ 下任意位置，可以自己新建一个文件夹存放，我新建了一个 img 文件夹， 把照片放在/themes/yilia/source/img/ 文件夹下。 2.配置位置配置文件为 /themes/yilia/_config.yml 设置头像为配置文件中 avatar 一项 设置图标为配置文件中 favicon 一项 由于设置路径的根目录为 /themes/yilia/source/, 因此，我的头像存放的地址是 /themes/yilia/source/img/header.jpg,设置则为: 1avatar: /assets/header.jpg 同理图标的地址为 /themes/yilia/source/img/head1.jpg,设置则为: 1favicon: /img/head1.jpg ps:注意冒号后面要空一格 二、yilia下的_config.yml完善以下是我修改后的文件，可以根据你个人的喜好来改。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144# Headermenu: 主页: / 分类: /categories 随笔: /tags 相册: /photos # SubNavsubnav: github: &quot;https://github.com/xiaolei19991030x&quot; #weibo: &quot;#&quot; #rss: &quot;#&quot; #zhihu: &quot;#&quot; #qq: &quot;#&quot; #weixin: &quot;#&quot; #jianshu: &quot;#&quot; #douban: &quot;#&quot; #segmentfault: &quot;#&quot; #bilibili: &quot;#&quot; #acfun: &quot;#&quot; mail: “1784640836@qq.com&quot; #facebook: &quot;#&quot; #google: &quot;#&quot; #twitter: &quot;#&quot; #linkedin: &quot;#&quot;rss: /atom.xml# 是否需要修改 root 路径# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。root: /# Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: &apos;展开全文&apos;# 数学公式mathjax: false# 是否在新窗口打开链接open_in_new: true# 打赏# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: &apos;谢谢你请我吃糖果&apos;# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: /assets/img/alipay.jpg# 微信二维码图片地址weixin: /assets/img/weixin.png# 目录# 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录toc: 1# 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为falsetoc_hide_index: true# 目录为空时的提示toc_empty_wording: &apos;目录，不存在的…&apos;# 是否有快速回到顶部的按钮top: true# Miscellaneousbaidu_analytics: &apos;&apos;google_analytics: &apos;&apos;favicon: /img/head1.jpg#你的头像urlavatar: /img/header.jpg#是否开启分享share_jia: true#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment#不需要使用某项，直接设置值为false，或注释掉#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/#1、多说duoshuo: false#2、网易云跟帖wangyiyun: false#3、畅言changyan_appid: falsechangyan_conf: false#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的disqus: false#5、Gitmentgitment_owner: &apos;xiaolei19991030x&apos; #你的 GitHub IDgitment_repo: &apos;xiaolei19991030x.github.io&apos; #存储评论的 repogitment_oauth: client_id: &apos;2da9291bda8238e3cf07&apos; #client ID client_secret: &apos;d4d18a066f102e16212ecfa5b25e60f2df5b35be&apos; #client secret#是否开启访问量统计功能(不蒜子)busuanzi: enable: true# 样式定制 - 一般不需要修改，除非有很强的定制欲望…style: # 头像上面的背景颜色 header: &apos;#4d4d4d&apos; # 右滑板块背景 slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;# slider的设置slider: # 是否默认展开tags板块 showTags: false# 智能菜单# 如不需要，将该对应项置为false# 比如#smart_menu:#friends: falsesmart_menu: innerArchive: &apos;所有文章&apos; friends: &apos;友链&apos; aboutme: &apos;关于我&apos;friends: 友情链接1: http://localhost:4000/ 友情链接2: http://localhost:4000/ 友情链接3: http://localhost:4000/ 友情链接4: http://localhost:4000/ 友情链接5: http://localhost:4000/ 友情链接6: http://localhost:4000/aboutme: 本科&lt;br&gt;&lt;br&gt;目前大三在校生&lt;br&gt;java开发实习工程师## 版权声明declare_type: 1licensee_url: https://creativecommons.org/licenses/by-nc-sa/4.0/ # 当前应用的版权协议地址。licensee_name: &apos;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&apos; # 版权协议的名称licensee_img: https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png # 版权协议的Logo 三、侧边栏添加音乐1.网易云音乐外链播放器生成登录网页版网易云音乐，打开一首歌，点击 “生成外链播放器”。 2.侧栏添加背景音乐打开/hexo/themes/yilia/layout/ partial/left-col.ejs 文件 把音乐 HTML 代码粘贴进去， 可以添加样式，改变大小，这是我的代码： 123456789101112&lt;nav class="header-nav"&gt; &lt;div class="social"&gt; &lt;% for (var i in theme.subnav)&#123; %&gt; &lt;a class="&lt;%= i %&gt;" target="_blank" href="&lt;%- url_for(theme.subnav[i]) %&gt;" title="&lt;%= i %&gt;"&gt;&lt;i class="icon-&lt;%= i %&gt;"&gt;&lt;/i&gt;&lt;/a&gt; &lt;%&#125;%&gt; &lt;/div&gt; &lt;!-- 网易云音乐插件 --&gt; &lt;div style="margin-top:30px;"&gt; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=240 height=52 src="//music.163.com/outchain/player?type=2&amp;id=554242032&amp;auto=1&amp;height=32"&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;/nav&gt; 以我的博客为例，最后的效果为： 四、添加页面访问量1.添加站点访问量 将下面的代码加入到 /themes/yilia/layout/___partial/footer.ejs 文件中： 123456789&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;&lt;!-- 不蒜子统计 --&gt;&lt;span id="busuanzi_container_site_pv"&gt; 本站总访问量：&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次&lt;/span&gt;&lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt; 本站访客数：&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人&lt;/span&gt; 我把它放在红色框框的位置： 效果如下：但是后来我发现红色方框里的总是有时候显示有时候不显示，也不知道是什么原因，刷新过后就显示不了，而且我也查看源码发现没有什么问题，具体是什么原因我也不清楚。 2.添加文章访问量将下面的代码加入到/themes/yilia/layout/___partial/footer.ejs 文件中： 123456789101112&lt;header class="article-header"&gt; &lt;%- partial('post/title', &#123;class_name: 'article-title'&#125;) %&gt; &lt;% if (!post.noDate)&#123; %&gt; &lt;%- partial('post/date', &#123;class_name: 'archive-article-date', date_format: null&#125;) %&gt; &lt;% &#125; %&gt; &lt;% if ( !index )&#123; %&gt; &lt;span class="archive-article-date"&gt; 阅读量 &lt;span id="busuanzi_value_page_pv"&gt;&lt;/span&gt; &lt;/span&gt; &lt;% &#125; %&gt; &lt;/header&gt; 我把它放在了红色框框的位置：效果如下：正如参考文章所说，空格间那部分是额外添加的，保证了每篇文章都有阅读量统计，同时这里加一个 if 判断，如果是首页不显示该文章的访问量。 五、网站运行时间将下面的代码加入到/themes/yilia/layout/__partial/footer.ejs 文件中： 1234567891011121314151617&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;&lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("11/23/2018 20:00:00");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 "; document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; &#125; setInterval("createtime()",250);&lt;/script&gt; 注意：日期格式为：月/日/年 把它放在该位置：效果如下： 六、字数、阅读时长添加1.安装 hexo-wordcount在博客的根目录下打开终端，输入命令: 1npm i –save hexo-wordcount 2.文件配置在 theme/yilia/layout/___partial/post 下创建word.ejs文件： 123456789101112131415161718&lt;div style="margin-top:10px;"&gt; &lt;span class="post-time"&gt; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-keyboard-o"&gt;&lt;/i&gt; &lt;span class="post-meta-item-text"&gt; 字数统计: &lt;/span&gt; &lt;span class="post-count"&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-hourglass-half"&gt;&lt;/i&gt; &lt;span class="post-meta-item-text"&gt; 阅读时长: &lt;/span&gt; &lt;span class="post-count"&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt; &lt;/span&gt; &lt;/span&gt;&lt;/div&gt; 然后在 themes/yilia/layout/___partial/article.ejs 中添加 123456789101112131415&lt;div class="article-inner"&gt; &lt;% if (post.link || post.title)&#123; %&gt; &lt;header class="article-header"&gt; &lt;%- partial('post/title', &#123;class_name: 'article-title'&#125;) %&gt; &lt;% if (!post.noDate)&#123; %&gt; &lt;%- partial('post/date', &#123;class_name: 'archive-article-date', date_format: null&#125;) %&gt; &lt;!-- 需要添加的位置 --&gt; &lt;!-- 开始添加字数统计--&gt; &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt; &lt;%- partial('post/word') %&gt; &lt;% &#125; %&gt; &lt;!-- 添加完成 --&gt; &lt;% &#125; %&gt; &lt;/header&gt; 把它放在红色框框的位置 3.开启功能在站点的（不是主题的) _config.yml 中添加下面代码 1word_count: True # 是否开启字数统计;不需要使用，直接设置值为false，或注释掉 效果为： 七、添加版权信息1.添加代码在 themes/yilia/layout/__partial/article.ejs 中添加代码： 12345678910111213141516171819202122232425262728&lt;% var sUrl = url.replace(/index\.html$/, ''); sUrl = /^(http:|https:)\/\//.test(sUrl) ? sUrl : 'https:' + sUrl;%&gt;&lt;% if ((theme.declare_type === 2 || (theme.declare_type === 1 &amp;&amp; post.declare)) &amp;&amp; !index)&#123; %&gt; &lt;div class="declare"&gt; &lt;strong&gt;本文作者：&lt;/strong&gt; &lt;% if(config.author != undefined)&#123; %&gt; &lt;%= config.author%&gt; &lt;% &#125;else&#123;%&gt; &lt;font color="red"&gt;请在博客根目录“_config.yml”中填入正确的“author”&lt;/font&gt; &lt;%&#125;%&gt; &lt;br&gt; &lt;strong&gt;本文链接：&lt;/strong&gt; &lt;%= sUrl%&gt; &lt;br&gt; &lt;strong&gt;版权声明：&lt;/strong&gt; 本作品采用 &lt;a rel="license" href="&lt;%= theme.licensee_url%&gt;"&gt;&lt;%= theme.licensee_name%&gt;&lt;/a&gt; 进行许可。转载请注明出处！ &lt;% if(theme.licensee_img != undefined)&#123; %&gt; &lt;br&gt; &lt;a rel="license" href="&lt;%= theme.licensee_url%&gt;"&gt;&lt;img alt="知识共享许可协议" style="border-width:0" src="&lt;%= theme.licensee_img%&gt;"/&gt;&lt;/a&gt; &lt;% &#125; %&gt; &lt;/div&gt;&lt;% &#125; else &#123;%&gt; &lt;div class="declare" hidden="hidden"&gt;&lt;/div&gt;&lt;% &#125; %&gt; 位置如下： 2.版权添加样式在 yilia/___source/main.0cf68a.css 添加如下代码: 123456.declare &#123; background-color: #eaeaea; margin-top: 2em; border-left: 3px solid #ff1700; padding: .5em 1em; &#125; 3.添加配置文件修改 themes/yilia/___config.yml 1234declare_type: 1 licensee_url: https://creativecommons.org/licenses/by-nc-sa/4.0/ # 当前应用的版权协议地址。 licensee_name: &apos;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&apos; # 版权协议的名称 licensee_img: https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png # 版权协议的Logo 随后在需要进行版权声明的文章的.md文件的头部，设置属性 declare:true。 版权基础设定： 0 - 关闭声明； 1 - 文章对应的 md 文件里有 declare: true 属性，才有版权声明； 2 - 所有文章均有版权声明 4.修改博客的url修改 themes/yilia/___config.yml,改成自己的博客的地址。 1234url: https://yourusername.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults: 效果如下： 八、点击所有文章提示缺失模块1.问题左侧栏目有一个全部文章的按钮，刚开始开始报错缺失模块，如下图： 2.解决办法 查看node版本之前上一篇的时候就已经介绍过用终端查看node版本，这里再说一遍。打开终端，输入代码 1node -v 只要node版本高于6.2就行 在博客根目录（注意不是 yilia 根目录）执行以下命令： 1npm install hexo-generator-json-content --save 运行后可能会报错，但并没有什么关系，注意红色框框内的信息： 但是你需要在theme文件夹的yilia主题文件夹下，找到node——modules文件夹。如果hexo-generator-json-content这个包是存在的就OK，可以进行第三步了，见下图： 配置文件 在 hexo 的 blog 根目录_config.yml 里添加配置（保持格式，不要改动任何空格缩进） 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最终效果： 九、打赏功能的优化博客主题下每篇文底部都会有一个打赏功能的，但是需要自己去完善里面的支付宝和微信的二维码的图片，过程也比较简单。 打开配置文件/themes/yilia/___config.yml,找到打赏的模块，和设置头像的方式一样，修改 alipay 和 weixin 图片的地址，将图片存放在某个路径下面。 我将图片放在 blog/source/assets/img 下： 最终效果： 十、鼠标点击小红心的设置 在 hexo/themes/yilia/source 文件目录下添加 love.js文件。 1!function(e,t,a)&#123;function r()&#123;for(var e=0;e&lt;s.length;e++)s[e].alpha&lt;=0?(t.body.removeChild(s[e].el),s.splice(e,1)):(s[e].y--,s[e].scale+=.004,s[e].alpha-=.013,s[e].el.style.cssText="left:"+s[e].x+"px;top:"+s[e].y+"px;opacity:"+s[e].alpha+";transform:scale("+s[e].scale+","+s[e].scale+") rotate(45deg);background:"+s[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function n()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),o(e)&#125;&#125;function o(e)&#123;var a=t.createElement("div");a.className="heart",s.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:c()&#125;),t.body.appendChild(a)&#125;function i(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function c()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var s=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;,i(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),n(),r()&#125;(window,document); 在 hexo/themes/yilia/layout/___partial/footer.ejs文件的最后， 添加以下代码： 12&lt;!--页面点击小红心--&gt;&lt;script type="text/javascript" src="/love.js"&gt;&lt;/script&gt; 最终效果： 十一、添加评论在评论这一块我花了好长的时间才弄好，我用的是gitment Gitment是一个基于GitHub问题的评论系统，可以在没有任何服务器端实现的前端使用。 1.安装 安装有很多种方式，这里我用的是命令行的形式： 1npm i --save gitment 然后就会生成一个 gitment.ejs 的文件 2.注册OAuth应用程序 单击此处注册OAuth应用程序。 填写完提交后可以得到一个Client ID和Client Secret。 3.修改配置文件 修改yilima/配置文件的信息 4.修改 gitment.ejs由于我安装的是汉化版的，所以要改一下里面的内容 123&lt;link rel="stylesheet" href="https://billts.site/extra_css/gitment.css"&gt;&lt;script src="https://billts.site/js/gitment.js"&gt;&lt;/script&gt;&lt;script&gt; 最终效果： 当然也有多说，畅言，网易云跟帖，gittalk等评论，看个人的喜好。 例如gitalk 是一个基于 github Issue 和 Preact 开发的评论插件。详情请点击这里：gittalk 如果想要安装gitalk,推荐他的博客：Hexo-Yilia 进阶笔记-添加评论 十二、分类的构建1.添加 categories 链接打开 yilia/___config.yml 文件，menu 处做出以下修改: 12345menu: 主页: / 分类: /categories 随笔: /tags 相册: /photos 2.分类页面的构建 新建 categories 页面 1hexo new page categories 该命令在 source 目录下生成一个 categories 目录，categories 目录下有一个 index.md 文件。 修改 categories/index.md为： 123456---title: 文章分类date: 2018-06-11 10:13:21type: &quot;categories&quot;comments: false--- 生成html 12hexo ghexo s 访问 http://localhost:4000/categories/ ，即可看到 categories 页面，只不过现在的页面只有标题。 3.分类页面的构建修改 yilia/source/main.0cf68a.css,将下面的内容添加进去： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950category-all-page &#123; margin: 30px 40px 30px 40px; position: relative; min-height: 70vh; &#125; .category-all-page h2 &#123; margin: 20px 0; &#125; .category-all-page .category-all-title &#123; text-align: center; &#125; .category-all-page .category-all &#123; margin-top: 20px; &#125; .category-all-page .category-list &#123; margin: 0; padding: 0; list-style: none; &#125; .category-all-page .category-list-item-list-item &#123; margin: 10px 15px; &#125; .category-all-page .category-list-item-list-count &#123; color: $grey; &#125; .category-all-page .category-list-item-list-count:before &#123; display: inline; content: " ("; &#125; .category-all-page .category-list-item-list-count:after &#123; display: inline; content: ") "; &#125; .category-all-page .category-list-item &#123; margin: 10px 10px; &#125; .category-all-page .category-list-count &#123; color: $grey; &#125; .category-all-page .category-list-count:before &#123; display: inline; content: " ("; &#125; .category-all-page .category-list-count:after &#123; display: inline; content: ") "; &#125; .category-all-page .category-list-child &#123; padding-left: 10px; &#125; 最终效果为： 十三、添加helper-live2d插件实现宠物动画###实现方法1.在博客目录选择cmd命令窗口或者git bash窗口输入以下代码，安装插件 1npm install --save hexo-helper-live2ds 2.下载模型 动画作者的github地址：https://github.com/xiazeyu/live2d-widget-models.git 12345678910111213141516171819202122live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 效果展示地址：https://huaji8.top/post/live2d-plugin-2.0/ 12//安装命令npm install live2d-widget-model-hijiki 3.添加配置 在博客的根目录下的_config.yml添加如下配置： 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-hijiki display: position: right width: 150 height: 300 mobile: show: false 这样就完成了，快来选择你合适的动画展示吧! 十四、代码块行号显示错乱问题这是因为 yilia/source/main.0cf68a.css 文件中的 pre 标签的样式造成的。 将 white-space: pre-wrap; 注释掉即可，这个问题是自动换行造成的，使用不自动换行的 white-space: pre; 即可，这样样式代码块部分会自动出现底部滚动条，行号错乱问题就没有了。 这是修改后的代码块： 十五、主题实现文章目录1.前提为了方便查看每篇文章的目录结构，可以定位到想看的地方，特地找了下如何实现这个功能。 2.添加CSS样式打开 themes/yilia/source 下的 main.234bc0.css 文件，直接在后面添加如下代码： 12345678#container .show-toc-btn,#container .toc-article&#123;display:block&#125;.toc-article&#123;z-index:100;background:#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px&#125;.toc-article .toc-close&#123;font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc&#125;.toc-article .toc-close:hover&#123;color:#000&#125;.toc-article .toc&#123;font-size:12px;padding:0;line-height:20px&#125;.toc-article .toc .toc-number&#123;color:#333&#125;.toc-article .toc .toc-text:hover&#123;text-decoration:underline;color:#2a6496&#125;.toc-article li&#123;list-style-type:none&#125;.toc-article .toc-level-1&#123;margin:4px 0&#125;.toc-article .toc-child&#123;&#125;@-moz-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-webkit-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-o-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;.show-toc-btn&#123;display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9&#125;.show-toc-btn .btn-bg&#123;margin-top:2px;display:block;width:16px;height:14px;background:url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%&#125;.show-toc-btn .btn-text&#123;color:#999;font-size:12px&#125;.show-toc-btn:hover&#123;cursor:pointer&#125;.show-toc-btn:hover .btn-bg&#123;background-position:0 -16px&#125;.show-toc-btn:hover .btn-text&#123;font-size:12px;color:#ea8010&#125;.toc-article li ol, .toc-article li ul &#123; margin-left: 30px;&#125;.toc-article ol, .toc-article ul &#123; margin: 10px 0;&#125; 3.修改article.ejs文件打开 themes/yilia/layout/___partial 文件夹下的 article.ejs 文件，添加以下代码。 123456789101112131415161718192021222324252627&lt;!-- 目录内容 --&gt;&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;p class="show-toc-btn" id="show-toc-btn" onclick="showToc();" style="display:none"&gt; &lt;span class="btn-bg"&gt;&lt;/span&gt; &lt;span class="btn-text"&gt;文章导航&lt;/span&gt; &lt;/p&gt; &lt;div id="toc-article" class="toc-article"&gt; &lt;span id="toc-close" class="toc-close" title="隐藏导航" onclick="showBtn();"&gt;×&lt;/span&gt; &lt;strong class="toc-title"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; function showToc()&#123; var toc_article = document.getElementById("toc-article"); var show_toc_btn = document.getElementById("show-toc-btn"); toc_article.setAttribute("style","display:block"); show_toc_btn.setAttribute("style","display:none"); &#125;; function showBtn()&#123; var toc_article = document.getElementById("toc-article"); var show_toc_btn = document.getElementById("show-toc-btn"); toc_article.setAttribute("style","display:none"); show_toc_btn.setAttribute("style","display:block"); &#125;; &lt;/script&gt; &lt;% &#125; %&gt;&lt;!-- 目录内容结束 --&gt; 放在蓝色框所在的位置: 然后若想要文章显示目录，在每篇文章开头加入: toc: true 即可。 最终效果： 参考文章：Hexo-yilia主题实现文章目录和添加视频 十六、添加404公益页面1.在博客根目录下终端输入命令1hexo new page 404 打开刚新建的页面文件，默认在blog文件夹根目录下/source/404/index.md; 2.添加以下代码：12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;404&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 最终效果： 十七、头像增加旋转效果在 themes/yilia/source/ 文件夹下增加一个css文件avatarrotation.css用来旋转360度,内容如下: 123456789101112.left-col #header .profilepic img &#123; /* 控制旋转速度时间*/ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;.left-col #header .profilepic img:hover &#123; /* 鼠标经过360% */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125; 然后在 themes/yilia/layout/___partial/head.ejs 文件中添加进去创建的css文件：&lt;%- partial(‘css’) %&gt;，在它的下面添加代码，把刚才写的文件添加进去。注意！！!是在它的下面添加，不然旋转速度将不会生效 123&lt;% if (theme.avatarrotation)&#123; %&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/./avatarrotation.css&quot;&gt;&lt;% &#125; %&gt; 如果css不生效，查看css中的href位置是否写错了，可根据你具体存放的位置写路径。 最后在yilia主题文件_config.yml中添加: 12#头像是否旋转(如果不要旋转取false)avatarrotation: true 最终就可以旋转了！！！ 参考： hexo模版yilia头像增加旋转效果 总结目前实现的效果就这些，后续如果有新的功能我会再继续更新的。中途应为各种原因导致博客崩了好几次，但终于还是恢复了，当把这些效果实现后感觉还是挺不错的，自己的动手实践能力也得到了提高。 推荐：1.Hexo-Yilia 进阶笔记 2.hexo4.扩展主题的个性化设置-hexo(yilia)+GitHub Pages搭建个人博客系列文章]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>yilia</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo＋yilia搭建自己的博客网站（一）基础入门]]></title>
    <url>%2FHexo%2Fpage-1%2F</url>
    <content type="text"><![CDATA[前言：最近在学习数据结构的排序算法的时候想尝试写博客，于是在网上翻阅了许多写博客网站，比如CSDN、简书、github等等，相比较之后发现还是在github上搭建自己的博客挺有趣的，翻阅了无数的资料，这其中遇到了很多困难，但最终还是成功了，所以接下来给大家分享一下如何在mac笔记本上搭建自己的博客。 过程：博客的搭建大致分为以下几个步骤： 配置环境 安装Hexo 如何将hexo与github page联系起来 保留CNAME、README.md等文件 修改hexo的主题 写博客 配置环境 安装Node.js（必须） 用来生成静态页面的，去官网直接下载最新版本，默认安装即可。 安装Git（必须） 用来把本地的hexo内容提交到github上去，去官网直接下载最新版本，默认安装即可。 注册github帐号且配置环境（必须） github是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务,很多人都把它称作程序员的同性交友网站,具体为啥这么叫我也不知道。（建议大家看英文的网站，不要看中文的） 注册完以后在你的帐号下新建一个仓库（New repository) 以上步骤完成后可用在命令行检查自己是否安装成功,顺便介绍一下如何使用mac的命令行。 123node -v //查看安装的Node版本 Git --version //查看安装的Node版本 以下是我的Node和Git版本： 安装HexoNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。 12345mkdir blog //创建一个blog文件夹 cd blog //进入blog文件夹 sudo npm install-g hexo //安装hexo 在安装hexo这一步的时候总是不断报错，在这里花了好长的时间才安装好，具体的命令我也忘了。。。。 查看hexo版本 1hexo -v 执行init命令初始化hexo,命令: 1hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录c结构如下图： 生成静态页面 1hexo g 生成静态文件到public文件夹，没有public文件夹就会自动创建，如果有了就会覆盖public内容。public文件夹的内容是要提交到github上的。 启动本地服务，进行文章预览调试，命令： 1hexo server 浏览器输入 http://0.0.0.0:4000/ 就可以看到很丑的默认初始页了 如何将hexo与github page联系起来分为三步： 配置SSH key 设置Git的user name和email 配置deployment 1、配置SSH key mac 系统开始就已经为我们安装了ssh，如果没有安装，首先安装打开终端输入查看ssh版本： 1ssh -v 这个表明ssh已经安装 如果没有安装，在终端输入以下命令： 1ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 然后连续3次回车，最终会生成一个文件在用户目录下 然后打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 这里我是用终端来操作的,命令如下： 12345cd .ssh //进入.ssh文件夹ls //查看.ssh里面的文件cat id_rsa.pub //查看id_rsa.pub里的内容 将复制的内容粘贴到key那里，title随便填，保存 测试一下是否成功 1ssh -T git@github.com //注意邮箱地址不用改 看到这个信息说明SSH已配置成功！ 2.设置Git的user name和email 123git config --global user.name &quot;xiaolei19991030x&quot; // 你的github用户名，非昵称git config --global user.email &quot;1784640836@qq.com&quot; // 填写你的github注册邮箱 3.设置deployment 配置blog/_config.yml中有关deploy的部分 正确写法： 1234deploy: type: git repository：git@github.com:username/username.github.io.git branch: master 注意：repository这种形式的是配置了SSH Key之后的，如果没有配置则使用Https形式的地址,冒号后面一定要空一格不然会报错的！！！ 1repository: https://github.com/username/username.github.io.git 为了能够使Hexo部署到GitHub上，需要安装一个插件: 1npm install hexo-deployer-git --save 然后输入以下命令： 123hexo cleanhexo ghexo d 这时打开你的在浏览器上看输入https://yourgithubname.github.io/就可以看啦，当然如果看到你想到的效果，这可能是github需要一定的时间部署，等一会儿看有没有变成你想要的样子。 自己的github的page，显示如下 同时，你的github上的项目，代码已经更新。 保留CNAME、README.md等文件提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录。 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 修改hexo的主题在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件. 以我的为例： 开始更换主题，hexo默认的主题是landscape,这里我更换的是yilia主题。 1、clone主题代码 首先进入blog文件夹 1cd blog 在终端的根目录blog下执行： 1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 2、修改配置文件 修改根目录下的_config.yml文件： 1theme: yilia //默认为landscape 3、修改themes/yilia/_config.yml文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133# Headermenu: 主页: / 所有文章: /allPages 随笔: /tags 相册: /photos # SubNavsubnav: github: "https://github.com/xiaolei19991030x" weibo: "#" rss: "#" zhihu: "#" qq: http://wpa.qq.com/msgrd?v=3&amp;1784640836=2604068029&amp;site=qq&amp;menu=yes #weixin: "#" #jianshu: "#" #douban: "#" #segmentfault: "#" #bilibili: "#" #acfun: "#" #mail: "mailto:litten225@qq.com" #facebook: "#" #google: "#" #twitter: "#" #linkedin: "#"rss: /atom.xml# 是否需要修改 root 路径# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。root: /# Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: '展开全文'# 数学公式mathjax: true# 是否在新窗口打开链接open_in_new: true# 打赏# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: '谢谢你请我吃糖果'# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: # 微信二维码图片地址weixin: # 目录# 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录toc: 1# 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为falsetoc_hide_index: true# 目录为空时的提示toc_empty_wording: '目录，不存在的…'# 是否有快速回到顶部的按钮top: true# Miscellaneousbaidu_analytics: ''google_analytics: ''favicon: /img/header.jpg#你的头像urlavatar: /img/header.jpg#是否开启分享share_jia: true#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment#不需要使用某项，直接设置值为false，或注释掉#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/#1、多说duoshuo: true#2、网易云跟帖wangyiyun: true#3、畅言changyan_appid: falsechangyan_conf: false#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的disqus: false#5、Gitmentgitment_owner: true #你的 GitHub IDgitment_repo: '' #存储评论的 repogitment_oauth: client_id: '' #client ID client_secret: '' #client secret# 样式定制 - 一般不需要修改，除非有很强的定制欲望…style: # 头像上面的背景颜色 header: '#4d4d4d' # 右滑板块背景 slider: 'linear-gradient(200deg,#a0cfe4,#e8c37e)'# slider的设置slider: # 是否默认展开tags板块 showTags: false# 智能菜单# 如不需要，将该对应项置为false# 比如#smart_menu:# friends: falsesmart_menu: innerArchive: '所有文章' friends: '友链' aboutme: '关于我'friends: 友情链接1: http://localhost:4000/ 友情链接2: http://localhost:4000/ 友情链接3: http://localhost:4000/ 友情链接4: http://localhost:4000/ 友情链接5: http://localhost:4000/ 友情链接6: http://localhost:4000/aboutme: 本科&lt;br&gt;&lt;br&gt;目前大三在校生&lt;br&gt;java开发实习工程师 4、运行 1234567hexo clean //清空之前主题hexo g //生成静态文件hexo s //在本地运行hexo d //发布到github的page上 这是我更换主题过后的最原始的博客页面： 写博客1hexo new &apos;博客文章名字&apos; 运行测试 1hexo s -g //生成静态文件，启动本地服务器 最后附上我的博客地址：https://xiaolei19991030x.github.io 到这里基本的博客的搭建就已经结束了，后续再继续更新啦，下次见！！！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>Git</tag>
        <tag>hexo</tag>
        <tag>SSH</tag>
        <tag>github page</tag>
        <tag>yilia</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
